#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Dec 26, 2018 01:32:52 PM CET  platform: Windows NT

import sys
import Main
from tkinter import filedialog, Tk, messagebox

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def set_Tk_var():
    global mirror_var
    mirror_var = StringVar()
    mirror_var.set("0")
    global x3d_output
    x3d_output = StringVar()
    global dae_output
    dae_output = StringVar()
    global expl_damage_var
    expl_damage_var = StringVar()
    global missile_storage_var
    missile_storage_var = StringVar()
    global drone_storage_var
    drone_storage_var = StringVar()
    global crew_compliment_var
    crew_compliment_var = StringVar()
    global hitpoints_var
    hitpoints_var = StringVar()
    global secrecy_var
    secrecy_var = StringVar()
    global purpose_var
    purpose_var = StringVar()
    global mass_var
    mass_var = StringVar()
    global inertia_yaw_var
    inertia_yaw_var = StringVar()
    global inertia_roll_var
    inertia_roll_var = StringVar()
    global inertia_pitch_var
    inertia_pitch_var = StringVar()
    global drag_forward_var
    drag_forward_var = StringVar()
    global drag_reverse_var
    drag_reverse_var = StringVar()
    global drag_vertical_var
    drag_vertical_var = StringVar()
    global drag_hor_var
    drag_hor_var = StringVar()
    global drag_pitch_var
    drag_pitch_var = StringVar()
    global drag_yaw_var
    drag_yaw_var = StringVar()
    global drag_roll_var
    drag_roll_var = StringVar()
    global name_var
    name_var = StringVar()
    global class_var
    class_var = StringVar()
    global type_var
    type_var = StringVar()
    global engine_size_var
    engine_size_var = StringVar()
    global name_ref_var
    name_ref_var = StringVar()
    global base_name_ref_var
    base_name_ref_var = StringVar()
    global desc_ref_var
    desc_ref_var = StringVar()
    global variant_ref_var
    variant_ref_var = StringVar()
    global short_variant_ref_var
    short_variant_ref_var = StringVar()
    global icon_ref_var
    icon_ref_var = StringVar()

    global model
    model = Main.Main()

    global string_vars_dict
    string_vars_dict = {
    "engine_size_var" : engine_size_var,
    "expl_damage_var" : expl_damage_var,
    "missile_storage_var" : missile_storage_var,
    "drone_storage_var" : drone_storage_var,
    "crew_compliment_var" : crew_compliment_var,
    "hitpoints_var" : hitpoints_var,
    "secrecy_var" : secrecy_var,
    "purpose_var" : purpose_var,
    "mass_var" : mass_var,
    "inertia_yaw_var" : inertia_yaw_var,
    "inertia_roll_var" : inertia_roll_var,
    "inertia_pitch_var" : inertia_pitch_var,
    "drag_forward_var" : drag_forward_var,
    "drag_reverse_var" : drag_reverse_var,
    "drag_vertical_var" : drag_vertical_var,
    "drag_hor_var" : drag_hor_var,
    "drag_pitch_var" : drag_pitch_var,
    "drag_yaw_var" : drag_yaw_var,
    "drag_roll_var" : drag_roll_var,
    "name_var" : name_var,
    "class_var" : class_var,
    "type_var" : type_var,
    "name_ref_var" : name_ref_var,
    "base_name_ref_var" : base_name_ref_var,
    "desc_ref_var" : desc_ref_var,
    "variant_ref_var" : variant_ref_var,
    "short_variant_ref_var" : short_variant_ref_var,
    "icon_ref_var" : icon_ref_var
    }

def mirror():
    pass

def clear_input_fields():
    for k in string_vars_dict:
        string_vars_dict[k].set("")
    mirror_var.set("0")
    dae_output.set("")
    x3d_output.set("")

def clear_instance():
    model.clear_project()
    clear_input_fields()

def exit_program():
    destroy_window()

def export_macro():
    f = filedialog.asksaveasfilename(defaultextension=".xml", filetypes = (("Macro XML","*.xml"),("all files","*.*")))
    if f is None or f == "":
        return
    model.update_xml()
    model.export_macro(file)

def export_component():
    f = filedialog.asksaveasfilename(defaultextension=".xml", filetypes = (("Component XML","*.xml"),("all files","*.*")))
    if f is None or f == "":
        return
    model.update_xml()
    model.export_component(file)

def import_comp():
    f = filedialog.askopenfilename(filetypes = (("XML Ship Component files","*.xml"),("all files","*.*")))
    if f is None or f == "":
        return
    model.import_component(f)
    update_window()

def import_macro():
    f = filedialog.askopenfilename(filetypes = (("XML Ship Macro files","*.xml"),("all files","*.*")))
    if f is None or f == "":
        return
    model.import_macro(f)
    update_window()

def openDAE():
    f = filedialog.askopenfilename(filetypes = (("DAE files","*.dae"),("all files","*.*")))
    if f is None or f == "":
        return
    model.import_mesh(f)
    update_window()

def openx3d():
    f = filedialog.askopenfilename(filetypes = (("X3D files","*.x3d"),("all files","*.*")))
    if f is None or f == "":
        return
    model.import_x3d(f)
    update_window()

def open_instance():
    f = filedialog.askopenfilename(filetypes = (("Ship Creater Project","*.scp"),("all files","*.*")))
    if f is None or f == "":
        return
    model.import_project(f)
    update_window()

#Start not save!
def save():
    model.update_xml(string_vars_dict)

    #SELECT OTUPUT FOLDER!
    folder = filedialog.askdirectory()
    if folder is None or folder == "":
        return
    model.output(folder, mirror_var)


def save_as_instance():
    model.update_xml(string_vars_dict)
    f = filedialog.asksaveasfilename(defaultextension=".scsv", filetypes = (("Ship Creater Project","*.scp"),("all files","*.*")))
    if f is None or f == "":
        return
    model.set_project_file(f)
    model.save_project()

def save_instance(event):
    if model.get_project_file() != "":
        model.update_xml(string_vars_dict)
        model.save_project()
    else:
        save_as_instance()

#a nightmare saved for last
def update_window():
    model.update_vars(string_vars_dict)
    dae_output.set(model.mesh_file_path)
    x3d_output.set(model.x3d_file_path)

def update_model():
    model.update_xml(string_vars_dict)

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import gui
    gui.vp_start_gui()